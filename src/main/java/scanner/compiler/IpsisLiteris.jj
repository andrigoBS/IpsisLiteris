options {
    STATIC = false;
//    IGNORE_CASE = true;
    OUTPUT_DIRECTORY = "src/main/java/scanner/compiler/build";
    UNICODE_INPUT = true;
}

PARSER_BEGIN(IpsisLiteris)
package scanner.compiler.build;

import java.io.IOException;import java.io.InputStream;import java.util.ArrayList;import java.util.LinkedList;
import java.util.List;

import lombok.Getter;
import scanner.compiler.errors.AnalyserError;
import scanner.compiler.errors.ErrorMessage;
import scanner.compiler.errors.Log;
import scanner.compiler.semantic.Semantic;
import scanner.compiler.semantic.Actions;

public class IpsisLiteris {
    Semantic semantic = new Semantic();

    public static void main (String[] args) throws ParseException, TokenMgrError {
        IpsisLiteris parser = new IpsisLiteris(System.in);
        parser.Program();
    }

    public static String compile(InputStream inputStream) throws ParseException, IOException {
        Log log = Log.getInstance();
        log.clear();
        IpsisLiteris parser = new IpsisLiteris(inputStream);
        parser.Lexic();
        if(log.hasError()){
            return log.toString();
        }
        inputStream.reset();
        log.clear();
        parser = new IpsisLiteris(inputStream);
        parser.Program();
        return (log.hasError()) ? log.toString() : "Programa compilado com sucesso!!! :D\n\n" + ProgramToOutput(parser.semantic);
    }

    static private String ProgramToOutput(Semantic target){
        StringBuilder output = new StringBuilder();
        for(var line : target.program){
            output.append(line.toString()).append("\n");
        }
        return output.toString();
    }

    private void skipUntil (List<Integer> type) {
        Token t = getToken(1);
        while (t.kind != EOF && !type.contains(t.kind)) {
            getNextToken();
            t = getToken(1);
        }
    }

    private void logAndConsume (List<Integer> expected, List<Integer> skipTo) {
        Log.getInstance().add(new AnalyserError(getToken(1), ErrorMessage.MISSING, expected));
        //skipUntil(skipTo);
    }

    private ArrayList<Integer> mergeFollow (List<Integer> a, List<Integer> b){
        ArrayList<Integer> newFollow = new ArrayList<>(a);
        newFollow.addAll(b);
        return newFollow;
    }
}

PARSER_END(IpsisLiteris)

// Ignorados
SKIP: {"\n" | "\r" | "\r\n" | " " | "\t" | "\f" }
SKIP : {
    ":{" : COMMENT                     |
    <COMMENT_LINE: ":_" <LINE> >       |
    <#LINE: (~["\n", "\r"])* ("\n" | "\r" | "\n\r" | "\r\n")  >
}
<COMMENT> SKIP : {
    "}:" : DEFAULT
}
<COMMENT> MORE : {
    <~[]>
}

// Palavras reservadas
TOKEN [IGNORE_CASE]: {
    <DEF: ("program"){1} > | <DATA_DEF: ("define"){1} > |
    <IS: ("is"){1} > | <EXE: ("execute"){1}> |

    <VAR: ("variable"){1} > | <NOT_VAR: ("not"){1}> | <SET: ("set"){1} > |
    <TO: ("to"){1} > | <GET: ("get"){1} >  | <PUT: ("put"){1}> |

    <NAT: ("natural"){1} > |  <REAL: ("real"){1} > | < CHAR: ("char"){1} > |
    <BOOL: ("boolean"){1} > | <TRUE: ("true"){1} > | <FALSE: ("false"){1} > |

    <WHILE: ("while"){1} > | <LOOP: ("loop"){1} > | <DO: ("do"){1} > |
    <IF: ("verify"){1} >
}

// Símbolos
TOKEN : {
    // Agregadores
    <OPEN_CURLY: ("{"){1} > | <CLOSE_CURLY: ("}"){1} >   |
    <OPEN_PARENT: ("("){1} > | <CLOSE_PARENT: (")"){1} > |
    <OPEN_SQUARE: ("["){1} > | <CLOSE_SQUARE: ("]"){1} > |

    // Comparadores
    <EQUAL: ("=="){1} > | <N_EQUAL: ("!="){1} > | <GREATER: (">"){1} >  |
    <LOWER: ("<"){1} > | <LOW_EQ: (">="){1} > | <GREAT_EQ: ("<="){1} >  |

    // Operadores Aritméticos
    <PLUS: ("+"){1} > | <MINUS: ("-"){1} > | <TIMES: ("*"){1} >         |
    <DIVIDE: ("/"){1} > | <POWER: ("**"){1} > | <INT_DIVIDE: ("%"){1} > |
    <MOD: ("%%"){1} > |

    // Operadores Lógicos
    <AND: ("&"){1} > | <OR: ("|"){1} > | <NOT: ("!"){1} > |

    // Simbolos especiais
    <DELIMITER: ("."){1} > | <SEPARATOR: (","){1} > | <HEADER_DEF: (":-"){1}>

}

// Identificadores
TOKEN : {
    <IDENTIFIER: (("_" | <LETTER>) (<LETTER>)* (<DPATH>)? ) |
                 (("_")? (<LETTER>)+ (<UPATH>))> |

    <#DPATH: <DIGIT> ((<LETTER>)* "_" (<LETTER>)* <DIGIT> | (<LETTER>)+ <DIGIT> )*
                     ((<LETTER>)+ | "_")+ > |

    <#UPATH: "_" ((<LETTER>)* <DIGIT> (<LETTER>)* "_" | (<DIGIT>)? (<LETTER>)+ ("_")?)* > |

    <#LETTER: ["A" - "Z"] | ["a" - "z"]>

}

// Constantes numéricas
TOKEN: {
    <INTEGER: <NUMS> (<DIGIT>)? >                        |
    <FLOAT: <INTEGER> (<DIGIT>)? (<DIGIT>)? "." <NUMS> > |
    <#DIGIT: ["0" - "9"] >                               |
    <#NUMS: <DIGIT> (<DIGIT>)? >
}

// Constantes literais
TOKEN : {
    <LITERAL: <SIMPLE_Q_STRING> | <DOUBLE_Q_STRING> >        |
    <#SIMPLE_Q_STRING: "'" (~["'"] | <ESCAPE_SQ> )* "'">     |
    <#DOUBLE_Q_STRING: "\"" (~["\""] | <ESCAPE_DQ> )* "\"" > |
    <#ESCAPE_DQ: "\\" "\"">                                     |
    <#ESCAPE_SQ: "\\" "'">
}

// Tokens inválidos
SPECIAL_TOKEN : {
    <INVALID_TOKEN: <NOT_TOKENS> | <INVALID_COLON> >
    {
        Log.getInstance().add(new AnalyserError(jjFillToken(), ErrorMessage.INVALID_TOKEN));
    } |

    <#NOT_TOKENS: (~["a"-"z", "A"-"Z", "+", "-", "*", "/", "%", "0"-"9", "{", "}", "(", ")", "[", "]", "\"",
    "'", "_", ".", ",", "\n", "\r", "\t", " "])> |
    <#INVALID_COLON: ":" (~["{", "-", "\n", "\r", "\t", " "]) >
}

//Analisador Sintático

void Program ():
{
    List<Integer> first = First.PROGRAM.getFirst();
    Token t;
}
{
    try{
        (
            Header(List.of(LITERAL))
            Literal(List.of(DEF))
        )?
        Def (List.of(OPEN_CURLY))
        OpCurly (mergeFollow(First.VAR_DECLARATION.getFirst(), First.MAIN.getFirst()))
        (VarDeclaration (First.MAIN.getFirst()))?
        ProgMain (List.of(CLOSE_CURLY))
        CloseCurly (List.of(IDENTIFIER, EOF))
        (
            t = Identifier (List.of(EOF))
            {Actions.AC2_ProgramIdentifierRec(semantic, t);}
        )?
    } catch (ParseException e) {
        logAndConsume(first, List.of(EOF));
    } finally{
        { Actions.AC1_EndOfProgram(semantic); }
    }
}

void VarDeclaration (List<Integer> follow):
{
    List<Integer> first = First.VAR_DECLARATION.getFirst();
}
{
    try{
        DataDef(List.of(OPEN_CURLY))
        OpCurly(First.VAR_FIELD.getFirst())
        VarField(List.of(CLOSE_CURLY))
        CloseCurly(follow)
    } catch (ParseException e){
            logAndConsume(first, follow);
    }
}

void VarField (List<Integer> follow):
{
    List<Integer> first = First.VAR_FIELD.getFirst();
}
{
    try{
        ConstDef (mergeFollow(follow, First.VAR_DEF.getFirst())) (VarDef(follow))? |
        VarDef (mergeFollow(follow, First.CONST_DEF.getFirst())) (ConstDef(follow))?

    } catch (ParseException e) {
        logAndConsume(first, follow);
    }
}

void ConstDef (List<Integer> follow):
{
    List<Integer> first = First.CONST_DEF.getFirst();
    ArrayList<Integer> delimiterFollow = mergeFollow(follow, First.TYPE.getFirst());
    Token t;
}
{
    try{
        NotVar(List.of(VAR))
        Var(First.TYPE.getFirst())
        { Actions.AC3_ContextToConstant(semantic); }
        (
            Type(List.of(IS))
            Is(First.ID_LIST.getFirst())
            IdConstList(First.CONSTANTS.getFirst())
            { Actions.AC4_EndOfDeclaration(semantic); }// AC#4
            t = Constants(List.of(DELIMITER))
            { Actions.AC5_ConstantDeclarationRecognition(semantic, t); }// AC#5
            Delimiter(delimiterFollow)
        )+
    } catch (ParseException e){
        logAndConsume(first, follow);
    }
}

void VarDef(List<Integer> follow):
{
    List<Integer> first = First.VAR_DEF.getFirst();
    ArrayList<Integer> delimiterFollow = mergeFollow(follow, First.TYPE.getFirst());
}
{
    try{
        Var(First.TYPE.getFirst())
        { Actions.AC6_VariableContextRecgnition(semantic); } // AC#6
        (
            Type (List.of(IS))
            Is (First.ID_LIST.getFirst())
            IdVariables (List.of(DELIMITER))
            { Actions.AC4_EndOfDeclaration(semantic); } // AC#4
            Delimiter (delimiterFollow)
        )+
    } catch (ParseException e) {
        logAndConsume(first, follow);
    }
}

void IdVariables(List<Integer> follow):
{
    List<Integer> first = First.ID.getFirst();
    ArrayList<Integer> idFollow = mergeFollow(follow, List.of(OPEN_SQUARE));
    Token t;
}
{
    try{
        t = Identifier(idFollow)
        {Actions.AC12_VariableRecognition(semantic, t); }// AC#12
        (
            OpSquare(List.of(INTEGER))
            t = Integer(List.of(CLOSE_SQUARE))
            { Actions.AC14_IndexableVariableIndexRecognition(semantic, t); }
            CloseSquare(follow)
        )?
        { Actions.AC13_IndexableVariableSize(semantic); }
        (
            Separator(follow)
            IdVariables(follow)
        )?
    } catch (ParseException e) {
        logAndConsume(first, follow);
    }
}

void ProgMain (List<Integer> follow):
{
    List<Integer> first = First.MAIN.getFirst();
}
{
    try{
        Exe(First.COMMAND_LIST.getFirst())
        CommandList(follow)
    } catch (ParseException e){
        logAndConsume(first, follow);
    }
}


// Commands

void Command (List<Integer> follow):
{
    List<Integer> first = First.COMMAND.getFirst();
}
{
    try{
        WhileDo(follow) | DoWhile(follow) | GetCommand(follow) |
        PutCommand(follow) | VerifyCommand(follow) | SetCommand(follow)
    } catch (ParseException e) {
        logAndConsume(first, follow);
    }
}

void CommandList (List<Integer> follow):
{
    List<Integer> first = First.COMMAND_LIST.getFirst();
    ArrayList<Integer> delimiterFollow = mergeFollow(First.COMMAND.getFirst(), List.of(CLOSE_CURLY));
}
{
    try{
        OpCurly(First.COMMAND.getFirst())
        (
            Command(List.of(DELIMITER))
            Delimiter(delimiterFollow)
        )+
        CloseCurly(follow)
    } catch (ParseException e) {
        logAndConsume(first, follow);
    }
}

// // Set
void SetCommand (List<Integer> follow):
{
    List<Integer> first = First.ATTRIBUTION.getFirst();
}
{
    try{
        Set(First.EXPRESSION.getFirst())
        { Actions.AC15_AtribuitionBegin(semantic); }// AC#15
        Expression(List.of(TO))
        To(First.ID_LIST.getFirst())
        IdVariables(follow)
        { Actions.AC16_AtribuitionEnd(semantic); } //AC#16
    } catch (ParseException e) {
        logAndConsume(first, follow);
    }
}

// // Verify

void VerifyCommand (List<Integer> follow):
{
    List<Integer> first = First.SELECT.getFirst();
}
{
    try{
        If(First.EXPRESSION.getFirst())
        Expression(List.of(IS))
        Is(List.of(TRUE, FALSE))
        (
            IsTrue(mergeFollow(follow, List.of(IS)))
            (
                Is(List.of(FALSE))
                OrIsFalse(follow)
            )?
            |
            IsFalse(mergeFollow(follow, List.of(IS)))
            (
                Is(List.of(TRUE))
                OrIsTrue(follow)
            )?
        )
        { Actions.AC24_EndOfSelection(semantic);}// AC#24
    } catch (ParseException e) {
        logAndConsume(first, follow);
    }
}

void IsTrue (List<Integer> follow):
{}
{
    try {
        True(First.COMMAND_LIST.getFirst())
        { Actions.AC25_JMF(semantic); }// AC#25
        CommandList(follow)
    } catch (ParseException e) {
        logAndConsume(List.of(TRUE), follow);
    }
}

void OrIsTrue (List<Integer> follow):
{}
{
    try {
        True(First.COMMAND_LIST.getFirst())
        { Actions.AC27_JMP(semantic); }// AC#27
        CommandList(follow)
    } catch (ParseException e) {
        logAndConsume(List.of(TRUE), follow);
    }
}

void IsFalse (List<Integer> follow):
{}
{
    try {
        False(First.COMMAND_LIST.getFirst())
        { Actions.AC26_JMT(semantic); }// AC#26
        CommandList(follow)
    } catch (ParseException e) {
        logAndConsume(List.of(FALSE), follow);
    }
}

void OrIsFalse (List<Integer> follow):
{}
{
    try {
        False(First.COMMAND_LIST.getFirst())
        { Actions.AC27_JMP(semantic); } // AC#27
        CommandList(follow)
    } catch (ParseException e) {
        logAndConsume(List.of(FALSE), follow);
    }
}

// // Put

void PutCommand (List<Integer> follow):
{
    List<Integer> first = First.PRINT.getFirst();
}
{
    try{
        Put(List.of(OPEN_CURLY))
        OpCurly(First.VALUE.getFirst())
        ValuePut(List.of(SEPARATOR, CLOSE_CURLY))
        { Actions.AC18_DataOutput(semantic); }//AC#18
        (
            Separator(First.VALUE.getFirst())
            ValuePut(List.of(SEPARATOR, CLOSE_CURLY))
            { Actions.AC18_DataOutput(semantic); } //AC#18
        )*
        CloseCurly(follow)
    } catch (ParseException e) {
        logAndConsume(first, follow);
    }
}

void ValuePut(List<Integer> follow):
{
    List<Integer> first = First.VALUE_PRINT.getFirst();
}
{
    try{
        IdPut(follow) | ConstantsPut(follow)
    } catch (ParseException e){
        logAndConsume(first, follow);
    }
}

void ConstantsPut (List<Integer> follow):
{
    List<Integer> first = First.CONSTANTS_PUT.getFirst();
    Token t;
}
{
    try{
        t = <LITERAL>   { Actions.AC23_ConstantLiteralToOutputOrExpression(semantic,t); } //AC#23
        | t = <INTEGER> { Actions.AC21_ConstantIntegerToOutputOrExpression(semantic, t); } //AC#21
        | t = <FLOAT>   { Actions.AC22_ConstantRealToOutputOrExpression(semantic, t); } //AC#22
    } catch (ParseException e) {
        logAndConsume(first, follow);
    }
}

void IdPut(List<Integer> follow):
{
    List<Integer> first = First.ID_PUT.getFirst();
    ArrayList<Integer> idFollow = mergeFollow(follow, List.of(OPEN_SQUARE));
    Token t;
}
{
    try{
        t = Identifier(idFollow)
        { Actions.AC19_DataOutputIdentifierRecognition(semantic, t); }// AC#19
        (
            OpSquare(List.of(INTEGER))
            t = Integer(List.of(CLOSE_SQUARE))
            { Actions.AC14_IndexableVariableIndexRecognition(semantic, t); } // AC#14
            CloseSquare(follow)
        )?
        { Actions.AC20_DataOutputIndexableIdentifierRecognition(semantic); }// AC#20
    } catch (ParseException e) {
        logAndConsume(first, follow);
    }
}

// // Get

void GetCommand (List<Integer> follow):
{
    List<Integer> first = First.READ.getFirst();
}
{
    try {
        Get(List.of(OPEN_CURLY))
        { Actions.AC17_ContextToEntry(semantic); } // AC#17
        OpCurly(First.ID_LIST.getFirst())
        IdVariables(List.of(CLOSE_CURLY))
        CloseCurly(follow)
    } catch (ParseException e) {
        logAndConsume(first, follow);
    }
}

// // Loop

void DoWhile (List<Integer> follow):
{
    List<Integer> first = First.DO_WHILE.getFirst();
}
{
    try{
        Loop (First.COMMAND_LIST.getFirst())
        { Actions.AC28_LoopRecognition(semantic); }// AC#28
        CommandList (List.of(WHILE))
        While (First.EXPRESSION.getFirst())
        Expression (List.of(IS))
        { Actions.AC29_EndOfLoop(semantic); }//AC#29
        Is (List.of(TRUE))
        True (follow)
    } catch (ParseException e) {
        logAndConsume(first, follow);
    }
}

void WhileDo (List<Integer> follow):
{
    List<Integer> first = First.WHILE_DO.getFirst();
}
{
    try{
        While (First.EXPRESSION.getFirst())
        { Actions.AC30_LoopExpressionRecognition(semantic); }//AC#30
        Expression (List.of(TRUE))
        { Actions.AC31_ExpressionJMF(semantic); }//AC31
        Is (List.of(TRUE))
        True (List.of(DO))
        Do (First.COMMAND_LIST.getFirst())
        CommandList (follow)
        { Actions.AC32_EndOfLoop(semantic); }//AC#32
    } catch (ParseException e) {
        logAndConsume(first, follow);
    }
}

void IdConstList(List<Integer> follow):
{
    List<Integer> first = List.of(IDENTIFIER);
    ArrayList<Integer> idFollow = mergeFollow(follow, List.of(SEPARATOR));
    Token t;
}
{
    try {
        t = Identifier(idFollow)
        {Actions.AC11_ConstantRecognition(semantic, t); }// AC#11
        (
            Separator(first)
            t = Identifier(idFollow)
            {Actions.AC11_ConstantRecognition(semantic, t); }// AC#11
        )*
    } catch (ParseException e) {
        logAndConsume(first, follow);
    }
}

// Expresison

void Expression (List<Integer> follow):
{
    List<Integer> first = First.EXP_LOGIC_ARITMETIC.getFirst();
    ArrayList<Integer> elementFollow = mergeFollow(follow, First.COMPARATOR.getFirst());
}
{
    try{
        ExpLogicAritmetic(elementFollow)
        (Comparator(First.EXP_LOGIC_ARITMETIC.getFirst()))?
    } catch (ParseException e){
        logAndConsume(first, follow);
    }
}

void Comparator (List<Integer> follow):
{
    List<Integer> first = First.COMPARATOR.getFirst();
    ArrayList<Integer> elementFollow = mergeFollow(follow, First.COMPARATOR.getFirst());
}
{
    try{
        <EQUAL> ExpLogicAritmetic(elementFollow)        { Actions.AC33_RelationalEqual(semantic); }//AC#33
        | <N_EQUAL> ExpLogicAritmetic(elementFollow)    { Actions.AC34_RelationalDiferent(semantic); }//AC#34
        | <LOWER> ExpLogicAritmetic(elementFollow)      { Actions.AC35_RelationalSmaller(semantic); }//AC#35
        | <GREATER> ExpLogicAritmetic(elementFollow)    { Actions.AC36_RelationalBigger(semantic); }//AC#36
        | <LOW_EQ> ExpLogicAritmetic(elementFollow)     { Actions.AC37_RelationalSmallerEqual(semantic); }//AC#37
        | <GREAT_EQ> ExpLogicAritmetic(elementFollow)   { Actions.AC38_RelationalBiggerEqual(semantic); }//AC#38
    } catch (ParseException e) {
        logAndConsume(first, follow);
    }
}

void ExpLogicAritmetic(List<Integer> follow):
{
    List<Integer> first = First.EXP_LOGIC_ARITMETIC.getFirst();
}
{
    try{
        Term2(First.LOW_PRIORITY.getFirst())
        (LowPriority(follow))?
    } catch(ParseException e){
        logAndConsume(first, follow);
    }
}

void LowPriority(List<Integer> follow):
{
    List<Integer> first = First.LOW_PRIORITY.getFirst();
}
{
    <PLUS> Term2(follow) (LowPriority(first))?      { Actions.AC39_AritimeticAdd(semantic); }//AC#39
    | <MINUS> Term2(follow) (LowPriority(first))?   { Actions.AC40_AritimeticSub(semantic); }//AC#40
    | <OR> Term2(follow) (LowPriority(first))?      { Actions.AC41_LogicOr(semantic); }//AC#41
}

void Term2(List<Integer> follow):
{
    List<Integer> first = First.TERM2.getFirst();
}
{
    Term1(follow)
    (MediumPriority(follow))?
}

void MediumPriority(List<Integer> follow):
{
    List<Integer> first = First.MEDIUM_PRIORITY.getFirst();
}
{
    <TIMES> Term1(follow)  (MediumPriority(follow))?           { Actions.AC42_AritimeticMultiply(semantic);}//AC#42
    | <DIVIDE> Term1(follow)  (MediumPriority(follow))?        { Actions.AC43_AritimeticDivide(semantic); }//AC#43
    | <INT_DIVIDE> Term1(follow)  (MediumPriority(follow))?    { Actions.AC44_AritimeticDivideInteger(semantic); }//AC#44
    | <MOD> Term1(follow)  (MediumPriority(follow))?           { Actions.AC45_AritimeticModule(semantic); }//AC#45
    | <AND> Term1(follow)  (MediumPriority(follow))?           { Actions.AC46_LogicAnd(semantic); } //AC#46
}

void Term1(List<Integer> follow):
{
    List<Integer> first = First.TERM1.getFirst();
}
{
    ValueElement(follow)
    (HighPriority(follow))?
}

void HighPriority(List<Integer> follow):
{
    List<Integer> first = List.of(POWER);
}
{
    <POWER> ValueElement(follow)  (HighPriority(follow))?      { Actions.AC47_AritimeticPotency(semantic); } //AC#47
}

void ValueElement(List<Integer> follow):
{
    List<Integer> first = First.VALUE_ELEMENT.getFirst();
}
{
    try{
        IdElement(follow) | ConstantsElement(follow)
    } catch (ParseException e){
        logAndConsume(first, follow);
    }
}

void IdElement(List<Integer> follow):
{
    List<Integer> first = First.ID_ELEMENT.getFirst();
    ArrayList<Integer> idFollow = mergeFollow(follow, List.of(OPEN_SQUARE));
    Token t;
}
{
    try{
        t = Identifier(idFollow)
        { Actions.AC19_DataOutputIdentifierRecognition(semantic, t); }// AC#19
        (
            OpSquare(List.of(INTEGER))
            t = Integer(List.of(CLOSE_SQUARE))
            { Actions.AC14_IndexableVariableIndexRecognition(semantic, t); } // AC#14
            CloseSquare(follow)
        )?
        { Actions.AC20_DataOutputIndexableIdentifierRecognition(semantic); }// AC#20
    } catch (ParseException e) {
        logAndConsume(first, follow);
    }
}

void ConstantsElement (List<Integer> follow):
{
    List<Integer> first = First.CONSTANTS_ELEMENT.getFirst();
    Token t;
}
{
    try{
        t = <LITERAL>   { Actions.AC23_ConstantLiteralToOutputOrExpression(semantic,t); } //AC#23
        | t = <INTEGER> { Actions.AC21_ConstantIntegerToOutputOrExpression(semantic, t); } //AC#21
        | t = <FLOAT>   { Actions.AC22_ConstantRealToOutputOrExpression(semantic, t); } //AC#22
        | <TRUE>   { Actions.AC48_LogicalConstantTrue(semantic); } //AC#48
        | <FALSE>   { Actions.AC49_LogicalConstantFalse(semantic);} //AC#48
    } catch (ParseException e) {
        logAndConsume(first, follow);
    }
}

void ParentesisExp (List<Integer> follow):
{
    List<Integer> first = First.PARENTESIS_EXP.getFirst();
}
{
    try{
        OpParentesis(First.EXPRESSION.getFirst())
        Expression(List.of(CLOSE_PARENT))
        CloseParentesis(follow)
    } catch (ParseException e) {
        logAndConsume(first, follow);
    }
}



void Type(List<Integer> follow):
{
    List<Integer> first = First.TYPE.getFirst();
}
{
    try {
        <NAT>       { Actions.AC7_NaturalType(semantic); }// AC#7
        | <REAL>    { Actions.AC8_RealType(semantic); }// AC#8
        | <CHAR>    { Actions.AC9_LiteralType(semantic); }// AC#9
        | <BOOL>    { Actions.AC10_LogicalType(semantic); }// AC#10
    } catch (ParseException e) {
        logAndConsume(first, follow);
    }
}

Token Constants (List<Integer> follow):
{
    List<Integer> first = First.CONSTANTS.getFirst();
    Token t;
}
{
    try{
        (t = <LITERAL> | t = <INTEGER> | t = <FLOAT> | t = <TRUE> | t = <FALSE>)
        { return t; }
    } catch (ParseException e) {
        logAndConsume(first, follow);
        return null;
    }
}



void Literal (List<Integer> follow):
{}
{
    try{
        <LITERAL>
    } catch (ParseException e){
        logAndConsume(List.of(LITERAL), follow);
    }
}

void Header (List<Integer> follow):
{}
{
    try{
        <HEADER_DEF>
    } catch (ParseException e){
        logAndConsume(List.of(HEADER_DEF), follow);
    }
}

void Def (List<Integer> follow):
{}
{
    try{
        <DEF>
    } catch (ParseException e){
        logAndConsume(List.of(DEF), follow);
    }
}

void DataDef (List<Integer> follow):
{}
{
    try{
        <DATA_DEF>
    } catch (ParseException e){
        logAndConsume(List.of(DATA_DEF), follow);
    }
}

void NotVar (List<Integer> follow):
{}
{
    try{
        <NOT_VAR>
    } catch (ParseException e){
        logAndConsume(List.of(NOT_VAR), follow);
    }
}

void Var (List<Integer> follow):
{}
{
    try{
        <VAR>
    } catch (ParseException e){
        logAndConsume(List.of(VAR), follow);
    }
}

void Exe (List<Integer> follow):
{}
{
    try{
        <EXE>
    } catch (ParseException e){
        logAndConsume(List.of(EXE), follow);
    }
}

void Do (List<Integer> follow):
{}
{
    try{
        <DO>
    } catch (ParseException e){
        logAndConsume(List.of(DO), follow);
    }
}

void While (List<Integer> follow):
{}
{
    try{
        <WHILE>
    } catch (ParseException e){
        logAndConsume(List.of(WHILE), follow);
    }
}

void Loop (List<Integer> follow):
{}
{
    try{
        <LOOP>
    } catch (ParseException e){
        logAndConsume(List.of(LOOP), follow);
    }
}

void Get (List<Integer> follow):
{}
{
    try{
        <GET>
    } catch (ParseException e){
        logAndConsume(List.of(GET), follow);
    }
}

void Put (List<Integer> follow):
{}
{
    try{
        <PUT>
    } catch (ParseException e){
        logAndConsume(List.of(PUT), follow);
    }
}

void False (List<Integer> follow):
{}
{
    try{
        <FALSE>
    } catch (ParseException e){
        logAndConsume(List.of(FALSE), follow);
    }
}

void True (List<Integer> follow):
{}
{
    try{
        <TRUE>
    } catch (ParseException e){
        logAndConsume(List.of(TRUE), follow);
    }
}

void Is (List<Integer> follow):
{}
{
    try{
        <IS>
    } catch (ParseException e) {
        logAndConsume(List.of(IS), follow);
    }
}

void If (List<Integer> follow):
{}
{
    try{
        <IF>
    } catch (ParseException e) {
        logAndConsume(List.of(IF), follow);
    }
}

void Separator (List<Integer> follow):
{}
{
    try{
        <SEPARATOR>
    } catch (ParseException e) {
        logAndConsume(List.of(SEPARATOR), follow);
    }
}

void To (List<Integer> follow):
{}
{
    try {
        <TO>
    } catch (ParseException e) {
        logAndConsume(List.of(TO), follow);
    }
}

void Set(List<Integer> follow):
{}
{
    try {
        <SET>
    } catch (ParseException e) {
        logAndConsume(List.of(SET), follow);
    }
}

void OpCurly (List<Integer> follow):
{}
{
    try{
        <OPEN_CURLY>
    } catch (ParseException e){
        logAndConsume(List.of(OPEN_CURLY), follow);
    }
}

void CloseCurly (List<Integer> follow):
{}
{
    try{
        <CLOSE_CURLY>
    } catch (ParseException e){
        logAndConsume(List.of(CLOSE_CURLY), follow);
    }
}

void Delimiter (List<Integer> follow):
{}
{
    try{
        <DELIMITER>
    } catch (ParseException e){
        logAndConsume(List.of(DELIMITER), follow);
    }
}

void Power (List<Integer> follow):
{}
{
    try{
        <POWER>
    } catch (ParseException e) {
        logAndConsume(List.of(POWER), follow);
    }
}

Token Identifier (List<Integer> follow):
{
    Token t;
}
{
    try{
    t = <IDENTIFIER>
    {return t;}
    } catch (ParseException e) {
        logAndConsume(List.of(IDENTIFIER), follow);
        return null;
    }
}

Token Integer (List<Integer> follow):
{
 Token t;
}
{
    try{
        t = <INTEGER>
        {return t;}
    } catch (ParseException e) {
        logAndConsume(List.of(INTEGER), follow);
        return null;
    }
}

void CloseSquare (List<Integer> follow):
{}
{
    try{
        <CLOSE_SQUARE>
    } catch (ParseException e) {
        logAndConsume(List.of(CLOSE_SQUARE), follow);
    }
}

void OpSquare (List<Integer> follow):
{}
{
    try{
        <OPEN_SQUARE>
    } catch (ParseException e) {
        logAndConsume(List.of(OPEN_SQUARE), follow);
    }
}

void Not (List<Integer> follow):
{}
{
    try{
        <NOT>
    } catch (ParseException e) {
        logAndConsume(List.of(NOT), follow);
    }
}

void CloseParentesis (List<Integer> follow):
{}
{
    try{
        <CLOSE_PARENT>
    } catch (ParseException e) {
        logAndConsume(List.of(CLOSE_PARENT), follow);
    }
}

void OpParentesis (List<Integer> follow):
{}
{
    try{
        <OPEN_PARENT>
    } catch (ParseException e) {
        logAndConsume(List.of(OPEN_PARENT), follow);
    }
}

// Analisador Léxico

void Lexic():
{}
{
   (token())*
}

void token():
{}
{
    // palavras reservadas
     <DEF> | <DATA_DEF> | <IS> | <EXE> | <VAR> | <NOT_VAR> | <SET> | <TO> |
     <GET> | <PUT> | <NAT> | <REAL> | <CHAR> | <BOOL> | <TRUE> | <FALSE> |
     <WHILE> | <LOOP> | <DO> | <IF> |

     // Agregadores
     <OPEN_CURLY> | <CLOSE_CURLY> | <OPEN_PARENT> | <CLOSE_PARENT> | <OPEN_SQUARE> |
     <CLOSE_SQUARE> |

     // Comparadores
     <EQUAL> | <N_EQUAL> | <GREATER> | <LOWER> | <LOW_EQ> | <GREAT_EQ> |

     // Operadores Aritméticos
     <PLUS> | <MINUS> | <TIMES> | <DIVIDE> | <POWER> | <INT_DIVIDE> | <MOD> |

     // Operadores Lógicos
     <AND> | <OR> | <NOT> |

     // Simbolos especiais
     <DELIMITER> | <SEPARATOR> | <HEADER_DEF> |

     // Identificador
     <IDENTIFIER> |

     // Constantes
     <INTEGER> | <FLOAT> | <LITERAL>
}





