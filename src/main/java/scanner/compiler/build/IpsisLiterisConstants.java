/* Generated By:JavaCC: Do not edit this line. IpsisLiterisConstants.java */
package scanner.compiler.build;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface IpsisLiterisConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMENT_LINE = 8;
  /** RegularExpression Id. */
  int LINE = 9;
  /** RegularExpression Id. */
  int DEF = 12;
  /** RegularExpression Id. */
  int DATA_DEF = 13;
  /** RegularExpression Id. */
  int IS = 14;
  /** RegularExpression Id. */
  int EXE = 15;
  /** RegularExpression Id. */
  int VAR = 16;
  /** RegularExpression Id. */
  int NOT_VAR = 17;
  /** RegularExpression Id. */
  int SET = 18;
  /** RegularExpression Id. */
  int TO = 19;
  /** RegularExpression Id. */
  int GET = 20;
  /** RegularExpression Id. */
  int NAT = 21;
  /** RegularExpression Id. */
  int REAL = 22;
  /** RegularExpression Id. */
  int CHAR = 23;
  /** RegularExpression Id. */
  int BOOL = 24;
  /** RegularExpression Id. */
  int TRUE = 25;
  /** RegularExpression Id. */
  int FALSE = 26;
  /** RegularExpression Id. */
  int WHILE = 27;
  /** RegularExpression Id. */
  int LOOP = 28;
  /** RegularExpression Id. */
  int DO = 29;
  /** RegularExpression Id. */
  int IF = 30;
  /** RegularExpression Id. */
  int SPECIAL_SYMBOL = 31;
  /** RegularExpression Id. */
  int IDENTIFIER = 32;
  /** RegularExpression Id. */
  int DPATH = 33;
  /** RegularExpression Id. */
  int UPATH = 34;
  /** RegularExpression Id. */
  int LETTER = 35;
  /** RegularExpression Id. */
  int INTEGER = 36;
  /** RegularExpression Id. */
  int FLOAT = 37;
  /** RegularExpression Id. */
  int DIGIT = 38;
  /** RegularExpression Id. */
  int NUMS = 39;
  /** RegularExpression Id. */
  int LITERAL = 40;
  /** RegularExpression Id. */
  int SIMPLE_Q_STRING = 41;
  /** RegularExpression Id. */
  int DOUBLE_Q_STRING = 42;
  /** RegularExpression Id. */
  int ESCAPE_DQ = 43;
  /** RegularExpression Id. */
  int ESCAPE_SQ = 44;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "\" \"",
    "\"\\t\"",
    "\"\\f\"",
    "\":{\"",
    "<COMMENT_LINE>",
    "<LINE>",
    "\"}:\"",
    "<token of kind 11>",
    "<DEF>",
    "<DATA_DEF>",
    "<IS>",
    "<EXE>",
    "<VAR>",
    "<NOT_VAR>",
    "<SET>",
    "<TO>",
    "<GET>",
    "<NAT>",
    "<REAL>",
    "<CHAR>",
    "<BOOL>",
    "<TRUE>",
    "<FALSE>",
    "<WHILE>",
    "<LOOP>",
    "<DO>",
    "<IF>",
    "<SPECIAL_SYMBOL>",
    "<IDENTIFIER>",
    "<DPATH>",
    "<UPATH>",
    "<LETTER>",
    "<INTEGER>",
    "<FLOAT>",
    "<DIGIT>",
    "<NUMS>",
    "<LITERAL>",
    "<SIMPLE_Q_STRING>",
    "<DOUBLE_Q_STRING>",
    "<ESCAPE_DQ>",
    "<ESCAPE_SQ>",
    "<token of kind 45>",
  };

}
