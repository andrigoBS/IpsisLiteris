/* IpsisLiterisTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. IpsisLiterisTokenManager.java */
package scanner.compiler.build;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import lombok.Getter;
import scanner.compiler.errors.AnalyserError;
import scanner.compiler.errors.ErrorMessage;
import scanner.compiler.errors.Log;

/** Token Manager. */
@SuppressWarnings ("unused")
public class IpsisLiterisTokenManager implements IpsisLiterisConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 70;
            return 106;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 12:
         return jjStopAtPos(0, 6);
      case 13:
         jjmatchedKind = 2;
         return jjMoveStringLiteralDfa1_0(0x8L);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x80L);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(1, 3);
         break;
      case 123:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 167;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xfc00005affffd9ffL & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(6, 8); }
                  else if (curChar == 44)
                  {
                     if (kind > 55)
                        kind = 55;
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 54)
                        kind = 54;
                  }
                  else if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 67;
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 64;
                  else if (curChar == 47)
                  {
                     if (kind > 47)
                        kind = 47;
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  else if (curChar == 43)
                  {
                     if (kind > 44)
                        kind = 44;
                  }
                  else if (curChar == 41)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  if (curChar == 58)
                     { jjAddStates(9, 10); }
                  else if (curChar == 33)
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  else if (curChar == 38)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  else if (curChar == 37)
                  {
                     if (kind > 49)
                        kind = 49;
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 46)
                        kind = 46;
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 58;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 56;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 50;
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 104;
                  else if (curChar == 60)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 40)
                        kind = 40;
                  }
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 106:
                  if ((0xffffdffeffffd9ffL & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 56)
                        kind = 56;
                  }
                  break;
               case 46:
                  if (curChar == 40 && kind > 34)
                     kind = 34;
                  break;
               case 47:
                  if (curChar == 41 && kind > 35)
                     kind = 35;
                  break;
               case 50:
                  if (curChar == 61 && kind > 38)
                     kind = 38;
                  break;
               case 51:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 61 && kind > 39)
                     kind = 39;
                  break;
               case 53:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 62 && kind > 40)
                     kind = 40;
                  break;
               case 55:
                  if (curChar == 60 && kind > 41)
                     kind = 41;
                  break;
               case 56:
                  if (curChar == 61 && kind > 42)
                     kind = 42;
                  break;
               case 57:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 61 && kind > 43)
                     kind = 43;
                  break;
               case 59:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 43 && kind > 44)
                     kind = 44;
                  break;
               case 61:
                  if (curChar == 45 && kind > 45)
                     kind = 45;
                  break;
               case 62:
                  if (curChar == 42 && kind > 46)
                     kind = 46;
                  break;
               case 63:
                  if (curChar == 47 && kind > 47)
                     kind = 47;
                  break;
               case 64:
                  if (curChar == 42 && kind > 48)
                     kind = 48;
                  break;
               case 65:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 37 && kind > 49)
                     kind = 49;
                  break;
               case 67:
                  if (curChar == 37 && kind > 50)
                     kind = 50;
                  break;
               case 68:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 38 && kind > 51)
                     kind = 51;
                  break;
               case 71:
                  if (curChar == 33 && kind > 53)
                     kind = 53;
                  break;
               case 72:
                  if (curChar == 46 && kind > 54)
                     kind = 54;
                  break;
               case 73:
                  if (curChar == 44 && kind > 55)
                     kind = 55;
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(11, 12); }
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(91, 87); }
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 94:
                  if (curChar == 39)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 95:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 97:
                  if (curChar == 39 && kind > 65)
                     kind = 65;
                  break;
               case 98:
                  if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 99:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 101:
                  if (curChar == 34 && kind > 65)
                     kind = 65;
                  break;
               case 102:
                  if ((0xfc00005affffd9ffL & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 103:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 104:
                  if ((0xffffdffeffffd9ffL & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 105:
                  if (curChar == 58)
                     { jjAddStates(9, 10); }
                  break;
               case 107:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjAddStates(16, 19); }
                  break;
               case 108:
                  if ((0x2400L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 109:
                  if (curChar == 13 && kind > 8)
                     kind = 8;
                  break;
               case 110:
                  if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 10 && kind > 8)
                     kind = 8;
                  break;
               case 112:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 45 && kind > 56)
                     kind = 56;
                  break;
               case 157:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 158:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 159:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 160:
                  if ((0x3ff000000000000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 161:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(20, 23); }
                  break;
               case 162:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(158); }
                  break;
               case 163:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(162, 158); }
                  break;
               case 164:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 165:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 166:
                  if ((0x3ff000000000000L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddTwoStates(75, 76); }
                  }
                  else if ((0xd000000150000001L & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  else if (curChar == 93)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  else if (curChar == 91)
                  {
                     if (kind > 36)
                        kind = 36;
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  else if (curChar == 123)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(86, 87); }
                  else if (curChar == 95)
                     { jjCheckNAdd(86); }
                  else if (curChar == 124)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(27, 28); }
                  else if ((0x400000004000L & l) != 0L)
                     { jjAddStates(29, 30); }
                  else if ((0x40000000400000L & l) != 0L)
                     { jjAddStates(31, 32); }
                  else if ((0x1000000010L & l) != 0L)
                     { jjAddStates(33, 34); }
                  else if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(35, 36); }
                  else if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  else if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 106:
                  if ((0xf7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  if (curChar == 95)
                     { jjCheckNAddStates(16, 19); }
                  break;
               case 0:
                  if ((0x8000000080000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 3:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x10000000100000L & l) != 0L && kind > 18)
                     kind = 18;
                  break;
               case 10:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x10000000100000L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 13:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x100000001000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 16:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x4000000040000L & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 20:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x400000004000L & l) != 0L && kind > 25)
                     kind = 25;
                  break;
               case 24:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x2000000020L & l) != 0L && kind > 27)
                     kind = 27;
                  break;
               case 31:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L && kind > 28)
                     kind = 28;
                  break;
               case 36:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0x1000000010000L & l) != 0L && kind > 29)
                     kind = 29;
                  break;
               case 41:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 123 && kind > 32)
                     kind = 32;
                  break;
               case 45:
                  if (curChar == 125 && kind > 33)
                     kind = 33;
                  break;
               case 48:
                  if (curChar == 91 && kind > 36)
                     kind = 36;
                  break;
               case 49:
                  if (curChar == 93 && kind > 37)
                     kind = 37;
                  break;
               case 70:
                  if (curChar == 124 && kind > 52)
                     kind = 52;
                  break;
               case 74:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddTwoStates(75, 76); }
                  break;
               case 75:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddTwoStates(75, 76); }
                  break;
               case 77:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddStates(37, 42); }
                  break;
               case 78:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(78, 79); }
                  break;
               case 79:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(80, 76); }
                  break;
               case 80:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(80, 76); }
                  break;
               case 81:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(81, 76); }
                  break;
               case 82:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddTwoStates(82, 83); }
                  break;
               case 83:
                  if (curChar != 95)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddTwoStates(82, 83); }
                  break;
               case 84:
                  if (curChar != 95)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddStates(43, 46); }
                  break;
               case 85:
                  if (curChar == 95)
                     { jjCheckNAdd(86); }
                  break;
               case 86:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(86, 87); }
                  break;
               case 87:
                  if (curChar != 95)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddTwoStates(88, 92); }
                  break;
               case 88:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddStates(47, 51); }
                  break;
               case 89:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(89, 90); }
                  break;
               case 91:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(91, 87); }
                  break;
               case 93:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddStates(52, 54); }
                  break;
               case 95:
                  { jjAddStates(6, 8); }
                  break;
               case 96:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 99:
                  { jjAddStates(3, 5); }
                  break;
               case 100:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 102:
                  if ((0xd000000150000001L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 104:
                  if ((0xf7ffffffffffffffL & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 107:
                  { jjCheckNAddStates(16, 19); }
                  break;
               case 114:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(35, 36); }
                  break;
               case 115:
                  if ((0x200000002000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 116:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if ((0x10000000100000L & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               case 122:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if ((0x1000000010L & l) != 0L)
                     { jjAddStates(33, 34); }
                  break;
               case 124:
                  if ((0x2000000020L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 125:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if ((0x800000008000L & l) != 0L && kind > 30)
                     kind = 30;
                  break;
               case 130:
                  if ((0x40000000400000L & l) != 0L)
                     { jjAddStates(31, 32); }
                  break;
               case 131:
                  if ((0x2000000020L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 132:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if ((0x200000002000000L & l) != 0L && kind > 31)
                     kind = 31;
                  break;
               case 139:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if ((0x400000004000L & l) != 0L)
                     { jjAddStates(29, 30); }
                  break;
               case 144:
                  if ((0x10000000100000L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 145:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if ((0x100000001000L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 147:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(27, 28); }
                  break;
               case 153:
                  if ((0x800000008000L & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 154:
                  if ((0x2000000020L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 155:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 70)
                     kind = 70;
                  break;
               case 106:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 70)
                     kind = 70;
                  break;
               case 95:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(6, 8); }
                  break;
               case 99:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 5); }
                  break;
               case 107:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(16, 19); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 167 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 125:
         return jjMoveStringLiteralDfa1_1(0x400L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   158, 161, 165, 99, 100, 101, 95, 96, 97, 106, 113, 77, 84, 91, 87, 93, 
   107, 108, 110, 112, 162, 158, 163, 164, 162, 158, 163, 153, 156, 145, 151, 137, 
   142, 128, 129, 120, 122, 78, 79, 81, 76, 82, 83, 80, 76, 82, 83, 89, 
   90, 87, 92, 88, 87, 92, 88, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 70 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        Log.getInstance().add(new AnalyserError(jjFillToken(), ErrorMessage.INVALID_TOKEN));
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public IpsisLiterisTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public IpsisLiterisTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 167; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x63fffffffffff001L, 0x2L, 
};
static final long[] jjtoSkip = {
   0x5feL, 0x40L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x40L, 
};
static final long[] jjtoMore = {
   0x800L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[167];
    private final int[] jjstateSet = new int[2 * 167];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
