/* IpsisLiteris.java */
/* Generated By:JavaCC: Do not edit this line. IpsisLiteris.java */
package scanner.compiler.build;

import java.util.LinkedList;
import java.util.List;

public class IpsisLiteris implements IpsisLiterisConstants {

    private List<AnalyserResult> result;

    public static void main (String[] args) throws ParseException, TokenMgrError {
        IpsisLiteris parser = new IpsisLiteris(System.in);
        parser.result = parser.Start();
        for (AnalyserResult analyser : parser.result) {
            System.out.println(analyser);
        }
    }

    public static class AnalyserResult {

        public final String token;
        public final int line;
        public final int column;
        public final String type;
        public final int id;
        public final boolean error;
        public final String errorMsg;

        private AnalyserResult (Token t, boolean error, String errorMsg) {
            token = t.image;
            line = t.beginLine;
            column = t.beginColumn;
            type = IpsisLiterisConstants.tokenImage[t.kind];
            id = t.kind;
            this.error = error;
            this.errorMsg = errorMsg;
        }

        public AnalyserResult (Token t) { this(t, false, ""); }

        public static AnalyserResult error (Token t, String msg) {
            return new AnalyserResult(t, true, msg);
        }

        @Override
        public String toString() {
            if (!error) return token + " " + line + " " + column + " " + type + " " + id;
            return errorMsg + " at line: " + line + " at column: " + column;
        }
    }

  final public List<AnalyserResult> Start() throws ParseException {List<AnalyserResult> result = new LinkedList<>();
   AnalyserResult input;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEF:
      case DATA_DEF:
      case IS:
      case EXE:
      case MAIN_DEF:
      case VAR:
      case CONST:
      case SET:
      case TO:
      case SYSCALL:
      case TYPE:
      case BOOL:
      case LOOP:
      case IF:
      case SPECIAL_SYMBOL:
      case HEADER_TOKEN:
      case EQUAL:
      case N_EQUAL:
      case GREATER:
      case LOWER:
      case LOW_EQ:
      case GREAT_EQ:
      case PLUS:
      case MINUS:
      case TIMES:
      case DIVIDE:
      case POWER:
      case INT_DIVIDE:
      case MOD:
      case AND:
      case OR:
      case NOT:
      case DELIMITER:
      case SEPARATOR:
      case IDENTIFIER:
      case INTEGER:
      case FLOAT:
      case LITERAL:
      case 67:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      input = token();
result.add(input);
    }
    jj_consume_token(0);
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

  final public AnalyserResult token() throws ParseException {Token t;
    String msg = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEF:
    case DATA_DEF:
    case IS:
    case EXE:
    case MAIN_DEF:
    case VAR:
    case CONST:
    case SET:
    case TO:
    case SYSCALL:
    case TYPE:
    case BOOL:
    case LOOP:
    case IF:
    case SPECIAL_SYMBOL:
    case HEADER_TOKEN:
    case EQUAL:
    case N_EQUAL:
    case GREATER:
    case LOWER:
    case LOW_EQ:
    case GREAT_EQ:
    case PLUS:
    case MINUS:
    case TIMES:
    case DIVIDE:
    case POWER:
    case INT_DIVIDE:
    case MOD:
    case AND:
    case OR:
    case NOT:
    case DELIMITER:
    case SEPARATOR:
    case IDENTIFIER:
    case INTEGER:
    case FLOAT:
    case LITERAL:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FLOAT:{
        t = jj_consume_token(FLOAT);
        break;
        }
      case INTEGER:{
        t = jj_consume_token(INTEGER);
        break;
        }
      case LITERAL:{
        t = jj_consume_token(LITERAL);
        break;
        }
      case SPECIAL_SYMBOL:{
        t = jj_consume_token(SPECIAL_SYMBOL);
        break;
        }
      case EQUAL:{
        t = jj_consume_token(EQUAL);
        break;
        }
      case N_EQUAL:{
        t = jj_consume_token(N_EQUAL);
        break;
        }
      case GREATER:{
        t = jj_consume_token(GREATER);
        break;
        }
      case LOWER:{
        t = jj_consume_token(LOWER);
        break;
        }
      case GREAT_EQ:{
        t = jj_consume_token(GREAT_EQ);
        break;
        }
      case LOW_EQ:{
        t = jj_consume_token(LOW_EQ);
        break;
        }
      case PLUS:{
        t = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        t = jj_consume_token(MINUS);
        break;
        }
      case TIMES:{
        t = jj_consume_token(TIMES);
        break;
        }
      case DIVIDE:{
        t = jj_consume_token(DIVIDE);
        break;
        }
      case POWER:{
        t = jj_consume_token(POWER);
        break;
        }
      case INT_DIVIDE:{
        t = jj_consume_token(INT_DIVIDE);
        break;
        }
      case MOD:{
        t = jj_consume_token(MOD);
        break;
        }
      case AND:{
        t = jj_consume_token(AND);
        break;
        }
      case OR:{
        t = jj_consume_token(OR);
        break;
        }
      case NOT:{
        t = jj_consume_token(NOT);
        break;
        }
      case DELIMITER:{
        t = jj_consume_token(DELIMITER);
        break;
        }
      case SEPARATOR:{
        t = jj_consume_token(SEPARATOR);
        break;
        }
      case IDENTIFIER:{
        t = jj_consume_token(IDENTIFIER);
        break;
        }
      case LOOP:{
        t = jj_consume_token(LOOP);
        break;
        }
      case TYPE:{
        t = jj_consume_token(TYPE);
        break;
        }
      case IF:{
        t = jj_consume_token(IF);
        break;
        }
      case DEF:{
        t = jj_consume_token(DEF);
        break;
        }
      case DATA_DEF:{
        t = jj_consume_token(DATA_DEF);
        break;
        }
      case MAIN_DEF:{
        t = jj_consume_token(MAIN_DEF);
        break;
        }
      case BOOL:{
        t = jj_consume_token(BOOL);
        break;
        }
      case EXE:{
        t = jj_consume_token(EXE);
        break;
        }
      case IS:{
        t = jj_consume_token(IS);
        break;
        }
      case SET:{
        t = jj_consume_token(SET);
        break;
        }
      case CONST:{
        t = jj_consume_token(CONST);
        break;
        }
      case SYSCALL:{
        t = jj_consume_token(SYSCALL);
        break;
        }
      case TO:{
        t = jj_consume_token(TO);
        break;
        }
      case VAR:{
        t = jj_consume_token(VAR);
        break;
        }
      case HEADER_TOKEN:{
        t = jj_consume_token(HEADER_TOKEN);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new AnalyserResult(t);}
      break;
      }
    case 67:{
      t = jj_consume_token(67);
msg = "TOKEN INV\u00c3\ufffdLIDO";
{if ("" != null) return AnalyserResult.error(t, msg);}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public IpsisLiterisTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x3fffc000,0x3fffc000,0x3fffc000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x4c7ffff0,0x4c7ffff0,0x4c7ffff0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x8,0x0,0x8,};
	}

  /** Constructor with InputStream. */
  public IpsisLiteris(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public IpsisLiteris(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new IpsisLiterisTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public IpsisLiteris(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new IpsisLiterisTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new IpsisLiterisTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public IpsisLiteris(IpsisLiterisTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(IpsisLiterisTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[68];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 3; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 68; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
