/* IpsisLiteris.java */
/* Generated By:JavaCC: Do not edit this line. IpsisLiteris.java */
package scanner.compiler.build;

import java.io.IOException;import java.io.InputStream;import java.util.ArrayList;import java.util.LinkedList;
import java.util.List;

import lombok.Getter;
import scanner.compiler.errors.AnalyserError;
import scanner.compiler.errors.ErrorMessage;
import scanner.compiler.errors.Log;
import scanner.compiler.semantic.Semantic;
import scanner.compiler.semantic.Actions;

public class IpsisLiteris implements IpsisLiterisConstants {
    Semantic semantic = new Semantic();

    public static void main (String[] args) throws ParseException, TokenMgrError {
        IpsisLiteris parser = new IpsisLiteris(System.in);
        parser.Program();
    }

    public static String compile(InputStream inputStream) throws ParseException, IOException {
        Log log = Log.getInstance();
        log.clear();
        IpsisLiteris parser = new IpsisLiteris(inputStream);
        parser.Lexic();
        if(log.hasError()){
            return log.toString();
        }
        inputStream.reset();
        log.clear();
        parser = new IpsisLiteris(inputStream);
        parser.Program();
        return (log.hasError()) ? log.toString() : "Programa compilado com sucesso!!! :D";
    }

    private void skipUntil (List<Integer> type) {
        Token t = getToken(1);
        while (t.kind != EOF && !type.contains(t.kind)) {
            getNextToken();
            t = getToken(1);
        }
    }

    private void logAndConsume (List<Integer> expected, List<Integer> skipTo) {
        Log.getInstance().add(new AnalyserError(getToken(1), ErrorMessage.MISSING, expected));
        //skipUntil(skipTo);
    }

    private ArrayList<Integer> mergeFollow (List<Integer> a, List<Integer> b){
        ArrayList<Integer> newFollow = new ArrayList<>(a);
        newFollow.addAll(b);
        return newFollow;
    }

//Analisador Sint√°tico
  final public 
void Program() throws ParseException {List<Integer> first = First.PROGRAM.getFirst();
    Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HEADER_DEF:{
        Header(List.of(LITERAL));
        Literal(List.of(DEF));
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      Def(List.of(OPEN_CURLY));
      OpCurly(mergeFollow(First.VAR_DECLARATION.getFirst(), First.MAIN.getFirst()));
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DATA_DEF:{
        VarDeclaration(First.MAIN.getFirst());
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      ProgMain(List.of(CLOSE_CURLY));
      CloseCurly(List.of(IDENTIFIER, EOF));
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        t = Identifier(List.of(EOF));
Actions.AC2_ProgramIdentifierRec(semantic, t);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
    } catch (ParseException e) {
logAndConsume(first, List.of(EOF));
    } finally {
{ Actions.AC1_EndOfProgram(semantic); }
    }
}

  final public void VarDeclaration(List<Integer> follow) throws ParseException {List<Integer> first = First.VAR_DECLARATION.getFirst();
    try {
      DataDef(List.of(OPEN_CURLY));
      OpCurly(First.VAR_FIELD.getFirst());
      VarField(List.of(CLOSE_CURLY));
      CloseCurly(follow);
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void VarField(List<Integer> follow) throws ParseException {List<Integer> first = First.VAR_FIELD.getFirst();
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT_VAR:{
        ConstDef(mergeFollow(follow, First.VAR_DEF.getFirst()));
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR:{
          VarDef(follow);
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        break;
        }
      case VAR:{
        VarDef(mergeFollow(follow, First.CONST_DEF.getFirst()));
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT_VAR:{
          ConstDef(follow);
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void ConstDef(List<Integer> follow) throws ParseException {List<Integer> first = First.CONST_DEF.getFirst();
    ArrayList<Integer> delimiterFollow = mergeFollow(follow, First.TYPE.getFirst());
    Token t;
    try {
      NotVar(List.of(VAR));
      Var(First.TYPE.getFirst());
Actions.AC3_ContextToConstant(semantic);
      label_1:
      while (true) {
        Type(List.of(IS));
        Is(First.ID_LIST.getFirst());
        IdList(First.CONSTANTS.getFirst());
Actions.AC4_EndOfDeclaration(semantic);
        // AC#4
                    t = Constants(List.of(DELIMITER));
Actions.AC5_ConstantDeclarationRecognition(semantic, t);
        Delimiter(delimiterFollow);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NAT:
        case REAL:
        case CHAR:
        case BOOL:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_1;
        }
      }
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void VarDef(List<Integer> follow) throws ParseException {List<Integer> first = First.VAR_DEF.getFirst();
    ArrayList<Integer> delimiterFollow = mergeFollow(follow, First.TYPE.getFirst());
    try {
      Var(First.TYPE.getFirst());
      label_2:
      while (true) {
        Type(List.of(IS));
        Is(First.ID_LIST.getFirst());
        IdList(List.of(DELIMITER));
Actions.AC4_EndOfDeclaration(semantic);
        Delimiter(delimiterFollow);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NAT:
        case REAL:
        case CHAR:
        case BOOL:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
      }
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void ProgMain(List<Integer> follow) throws ParseException {List<Integer> first = First.MAIN.getFirst();
    try {
      Exe(First.COMMAND_LIST.getFirst());
      CommandList(follow);
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void Command(List<Integer> follow) throws ParseException {List<Integer> first = First.COMMAND.getFirst();
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHILE:{
        WhileDo(follow);
        break;
        }
      case LOOP:{
        DoWhile(follow);
        break;
        }
      case GET:{
        Read(follow);
        break;
        }
      case PUT:{
        Print(follow);
        break;
        }
      case IF:{
        Select(follow);
        break;
        }
      case SET:{
        Attribution(follow);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void Attribution(List<Integer> follow) throws ParseException {List<Integer> first = First.ATTRIBUTION.getFirst();
    try {
      Set(First.EXPRESSION.getFirst());
      Expression(List.of(TO));
      To(First.ID_LIST.getFirst());
      IdList(follow);
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void Select(List<Integer> follow) throws ParseException {List<Integer> first = First.SELECT.getFirst();
    try {
      If(First.EXPRESSION.getFirst());
      Expression(List.of(IS));
      Is(List.of(TRUE, FALSE));
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:{
        IsTrue(mergeFollow(follow, List.of(FALSE)));
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FALSE:{
          IsFalse(follow);
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        break;
        }
      case FALSE:{
        IsFalse(mergeFollow(follow, List.of(TRUE)));
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRUE:{
          IsTrue(follow);
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void IsTrue(List<Integer> follow) throws ParseException {
    try {
      True(First.COMMAND_LIST.getFirst());
      CommandList(follow);
    } catch (ParseException e) {
logAndConsume(List.of(TRUE), follow);
    }
}

  final public void IsFalse(List<Integer> follow) throws ParseException {
    try {
      False(First.COMMAND_LIST.getFirst());
      CommandList(follow);
    } catch (ParseException e) {
logAndConsume(List.of(FALSE), follow);
    }
}

  final public void Print(List<Integer> follow) throws ParseException {List<Integer> first = First.PRINT.getFirst();
    try {
      Put(List.of(OPEN_CURLY));
      OpCurly(First.VALUE.getFirst());
      Value(List.of(SEPARATOR, CLOSE_CURLY));
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SEPARATOR:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_3;
        }
        Separator(First.VALUE.getFirst());
        Value(List.of(SEPARATOR, CLOSE_CURLY));
      }
      CloseCurly(follow);
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void Read(List<Integer> follow) throws ParseException {List<Integer> first = First.READ.getFirst();
    try {
      Get(List.of(OPEN_CURLY));
      OpCurly(First.ID_LIST.getFirst());
      IdList(List.of(CLOSE_CURLY));
      CloseCurly(follow);
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void DoWhile(List<Integer> follow) throws ParseException {List<Integer> first = First.DO_WHILE.getFirst();
    try {
      Loop(First.COMMAND_LIST.getFirst());
      CommandList(List.of(WHILE));
      While(First.EXPRESSION.getFirst());
      Expression(List.of(IS));
      Is(List.of(TRUE));
      True(follow);
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void WhileDo(List<Integer> follow) throws ParseException {List<Integer> first = First.WHILE_DO.getFirst();
    try {
      While(First.EXPRESSION.getFirst());
      Expression(List.of(TRUE));
      Is(List.of(TRUE));
      True(List.of(DO));
      Do(First.COMMAND_LIST.getFirst());
      CommandList(follow);
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

// Sint√°tico √öteis
  final public 
void IdList(List<Integer> follow) throws ParseException {List<Integer> first = First.ID_LIST.getFirst();
    ArrayList<Integer> idFollow = mergeFollow(follow, List.of(SEPARATOR));
    try {
      Id(idFollow);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SEPARATOR:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_4;
        }
        Separator(First.ID.getFirst());
        Id(idFollow);
      }
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void CommandList(List<Integer> follow) throws ParseException {List<Integer> first = First.COMMAND_LIST.getFirst();
    ArrayList<Integer> delimiterFollow = mergeFollow(First.COMMAND.getFirst(), List.of(CLOSE_CURLY));
    try {
      OpCurly(First.COMMAND.getFirst());
      label_5:
      while (true) {
        Command(List.of(DELIMITER));
        Delimiter(delimiterFollow);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SET:
        case GET:
        case PUT:
        case WHILE:
        case LOOP:
        case IF:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_5;
        }
      }
      CloseCurly(follow);
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void Expression(List<Integer> follow) throws ParseException {List<Integer> first = First.EXPRESSION.getFirst();
    ArrayList<Integer> elementFollow = mergeFollow(follow, First.COMPARATOR.getFirst());
    try {
      ExpLogicAritmetic(elementFollow);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:
      case N_EQUAL:
      case GREATER:
      case LOWER:
      case LOW_EQ:
      case GREAT_EQ:{
        Comparator(First.EXP_LOGIC_ARITMETIC.getFirst());
        ExpLogicAritmetic(elementFollow);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void ExpLogicAritmetic(List<Integer> follow) throws ParseException {List<Integer> first = First.EXP_LOGIC_ARITMETIC.getFirst();
    ArrayList<Integer> elementFollow = mergeFollow(follow, First.LOW_PRIORITY.getFirst());
    try {
      Element2(elementFollow);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:
        case OR:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_6;
        }
        LowPriorityOperator(First.ELEMENT2.getFirst());
        Element2(elementFollow);
      }
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void Element2(List<Integer> follow) throws ParseException {List<Integer> first = First.ELEMENT2.getFirst();
    ArrayList<Integer> elementFollow = mergeFollow(follow, First.MEDIUM_PRIORITY.getFirst());
    try {
      Element1(elementFollow);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TIMES:
        case DIVIDE:
        case INT_DIVIDE:
        case MOD:
        case AND:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_7;
        }
        MediumPriorityOperator(First.ELEMENT1.getFirst());
        Element1(elementFollow);
      }
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void Element1(List<Integer> follow) throws ParseException {List<Integer> first = First.ELEMENT1.getFirst();
    ArrayList<Integer> elementFollow = mergeFollow(follow, List.of(POWER));
    try {
      Element(elementFollow);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case POWER:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_8;
        }
        Power(First.ELEMENT.getFirst());
        Element(elementFollow);
      }
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void Element(List<Integer> follow) throws ParseException {List<Integer> first = First.ELEMENT.getFirst();
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_PARENT:
      case NOT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          Not(First.VALUE.getFirst());
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          ;
        }
        ParentesisExp(follow);
        break;
        }
      case TRUE:
      case FALSE:
      case IDENTIFIER:
      case INTEGER:
      case FLOAT:
      case LITERAL:{
        Value(follow);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void ParentesisExp(List<Integer> follow) throws ParseException {List<Integer> first = First.PARENTESIS_EXP.getFirst();
    try {
      OpParentesis(First.EXPRESSION.getFirst());
      Expression(List.of(CLOSE_PARENT));
      CloseParentesis(follow);
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void Value(List<Integer> follow) throws ParseException {List<Integer> first = First.VALUE.getFirst();
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        Id(follow);
        break;
        }
      case TRUE:
      case FALSE:
      case INTEGER:
      case FLOAT:
      case LITERAL:{
        Constants(follow);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void Id(List<Integer> follow) throws ParseException {List<Integer> first = First.ID.getFirst();
    ArrayList<Integer> idFollow = mergeFollow(follow, List.of(OPEN_SQUARE));
    try {
      Identifier(idFollow);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_SQUARE:{
        OpSquare(List.of(INTEGER));
        Integer(List.of(CLOSE_SQUARE));
        CloseSquare(follow);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        ;
      }
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

// Grupos
  final public 
void Type(List<Integer> follow) throws ParseException {List<Integer> first = First.TYPE.getFirst();
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NAT:{
        jj_consume_token(NAT);
Actions.AC7_NaturalType(semantic);
        break;
        }
      case REAL:{
        jj_consume_token(REAL);
Actions.AC8_RealType(semantic);
        break;
        }
      case CHAR:{
        jj_consume_token(CHAR);
Actions.AC9_LiteralType(semantic);
        break;
        }
      case BOOL:{
        jj_consume_token(BOOL);
Actions.AC10_LogicalType(semantic);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public Token Constants(List<Integer> follow) throws ParseException {List<Integer> first = First.CONSTANTS.getFirst();
    Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LITERAL:{
        t = jj_consume_token(LITERAL);
        break;
        }
      case INTEGER:{
        t = jj_consume_token(INTEGER);
        break;
        }
      case FLOAT:{
        t = jj_consume_token(FLOAT);
        break;
        }
      case TRUE:{
        t = jj_consume_token(TRUE);
        break;
        }
      case FALSE:{
        t = jj_consume_token(FALSE);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return t;}
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
    throw new Error("Missing return statement in function");
}

  final public void Comparator(List<Integer> follow) throws ParseException {List<Integer> first = First.COMPARATOR.getFirst();
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:{
        jj_consume_token(EQUAL);
        break;
        }
      case N_EQUAL:{
        jj_consume_token(N_EQUAL);
        break;
        }
      case LOWER:{
        jj_consume_token(LOWER);
        break;
        }
      case GREATER:{
        jj_consume_token(GREATER);
        break;
        }
      case LOW_EQ:{
        jj_consume_token(LOW_EQ);
        break;
        }
      case GREAT_EQ:{
        jj_consume_token(GREAT_EQ);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void LowPriorityOperator(List<Integer> follow) throws ParseException {List<Integer> first = First.LOW_PRIORITY.getFirst();
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      case OR:{
        jj_consume_token(OR);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

  final public void MediumPriorityOperator(List<Integer> follow) throws ParseException {List<Integer> first = First.MEDIUM_PRIORITY.getFirst();
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMES:{
        jj_consume_token(TIMES);
        break;
        }
      case DIVIDE:{
        jj_consume_token(DIVIDE);
        break;
        }
      case INT_DIVIDE:{
        jj_consume_token(INT_DIVIDE);
        break;
        }
      case MOD:{
        jj_consume_token(MOD);
        break;
        }
      case AND:{
        jj_consume_token(AND);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
logAndConsume(first, follow);
    }
}

// Terminais
  final public 
void Literal(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(LITERAL);
    } catch (ParseException e) {
logAndConsume(List.of(LITERAL), follow);
    }
}

  final public void Header(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(HEADER_DEF);
    } catch (ParseException e) {
logAndConsume(List.of(HEADER_DEF), follow);
    }
}

  final public void Def(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(DEF);
    } catch (ParseException e) {
logAndConsume(List.of(DEF), follow);
    }
}

  final public void DataDef(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(DATA_DEF);
    } catch (ParseException e) {
logAndConsume(List.of(DATA_DEF), follow);
    }
}

  final public void NotVar(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(NOT_VAR);
    } catch (ParseException e) {
logAndConsume(List.of(NOT_VAR), follow);
    }
}

  final public void Var(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(VAR);
    } catch (ParseException e) {
logAndConsume(List.of(VAR), follow);
    }
}

  final public void Exe(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(EXE);
    } catch (ParseException e) {
logAndConsume(List.of(EXE), follow);
    }
}

  final public void Do(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(DO);
    } catch (ParseException e) {
logAndConsume(List.of(DO), follow);
    }
}

  final public void While(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(WHILE);
    } catch (ParseException e) {
logAndConsume(List.of(WHILE), follow);
    }
}

  final public void Loop(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(LOOP);
    } catch (ParseException e) {
logAndConsume(List.of(LOOP), follow);
    }
}

  final public void Get(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(GET);
    } catch (ParseException e) {
logAndConsume(List.of(GET), follow);
    }
}

  final public void Put(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(PUT);
    } catch (ParseException e) {
logAndConsume(List.of(PUT), follow);
    }
}

  final public void False(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(FALSE);
    } catch (ParseException e) {
logAndConsume(List.of(FALSE), follow);
    }
}

  final public void True(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(TRUE);
    } catch (ParseException e) {
logAndConsume(List.of(TRUE), follow);
    }
}

  final public void Is(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(IS);
    } catch (ParseException e) {
logAndConsume(List.of(IS), follow);
    }
}

  final public void If(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(IF);
    } catch (ParseException e) {
logAndConsume(List.of(IF), follow);
    }
}

  final public void Separator(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(SEPARATOR);
    } catch (ParseException e) {
logAndConsume(List.of(SEPARATOR), follow);
    }
}

  final public void To(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(TO);
    } catch (ParseException e) {
logAndConsume(List.of(TO), follow);
    }
}

  final public void Set(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(SET);
    } catch (ParseException e) {
logAndConsume(List.of(SET), follow);
    }
}

  final public void OpCurly(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(OPEN_CURLY);
    } catch (ParseException e) {
logAndConsume(List.of(OPEN_CURLY), follow);
    }
}

  final public void CloseCurly(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(CLOSE_CURLY);
    } catch (ParseException e) {
logAndConsume(List.of(CLOSE_CURLY), follow);
    }
}

  final public void Delimiter(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(DELIMITER);
    } catch (ParseException e) {
logAndConsume(List.of(DELIMITER), follow);
    }
}

  final public void Power(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(POWER);
    } catch (ParseException e) {
logAndConsume(List.of(POWER), follow);
    }
}

  final public Token Identifier(List<Integer> follow) throws ParseException {Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
{if ("" != null) return t;}
    } catch (ParseException e) {
logAndConsume(List.of(IDENTIFIER), follow);
    }
    throw new Error("Missing return statement in function");
}

  final public void Integer(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(INTEGER);
    } catch (ParseException e) {
logAndConsume(List.of(INTEGER), follow);
    }
}

  final public void CloseSquare(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(CLOSE_SQUARE);
    } catch (ParseException e) {
logAndConsume(List.of(CLOSE_SQUARE), follow);
    }
}

  final public void OpSquare(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(OPEN_SQUARE);
    } catch (ParseException e) {
logAndConsume(List.of(OPEN_SQUARE), follow);
    }
}

  final public void Not(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(NOT);
    } catch (ParseException e) {
logAndConsume(List.of(NOT), follow);
    }
}

  final public void CloseParentesis(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(CLOSE_PARENT);
    } catch (ParseException e) {
logAndConsume(List.of(CLOSE_PARENT), follow);
    }
}

  final public void OpParentesis(List<Integer> follow) throws ParseException {
    try {
      jj_consume_token(OPEN_PARENT);
    } catch (ParseException e) {
logAndConsume(List.of(OPEN_PARENT), follow);
    }
}

// Analisador L√©xico
  final public 
void Lexic() throws ParseException {
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEF:
      case DATA_DEF:
      case IS:
      case EXE:
      case VAR:
      case NOT_VAR:
      case SET:
      case TO:
      case GET:
      case PUT:
      case NAT:
      case REAL:
      case CHAR:
      case BOOL:
      case TRUE:
      case FALSE:
      case WHILE:
      case LOOP:
      case DO:
      case IF:
      case OPEN_CURLY:
      case CLOSE_CURLY:
      case OPEN_PARENT:
      case CLOSE_PARENT:
      case OPEN_SQUARE:
      case CLOSE_SQUARE:
      case EQUAL:
      case N_EQUAL:
      case GREATER:
      case LOWER:
      case LOW_EQ:
      case GREAT_EQ:
      case PLUS:
      case MINUS:
      case TIMES:
      case DIVIDE:
      case POWER:
      case INT_DIVIDE:
      case MOD:
      case AND:
      case OR:
      case NOT:
      case DELIMITER:
      case SEPARATOR:
      case HEADER_DEF:
      case IDENTIFIER:
      case INTEGER:
      case FLOAT:
      case LITERAL:{
        ;
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_9;
      }
      token();
    }
}

  final public void token() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEF:{
      jj_consume_token(DEF);
      break;
      }
    case DATA_DEF:{
      jj_consume_token(DATA_DEF);
      break;
      }
    case IS:{
      jj_consume_token(IS);
      break;
      }
    case EXE:{
      jj_consume_token(EXE);
      break;
      }
    case VAR:{
      jj_consume_token(VAR);
      break;
      }
    case NOT_VAR:{
      jj_consume_token(NOT_VAR);
      break;
      }
    case SET:{
      jj_consume_token(SET);
      break;
      }
    case TO:{
      jj_consume_token(TO);
      break;
      }
    case GET:{
      jj_consume_token(GET);
      break;
      }
    case PUT:{
      jj_consume_token(PUT);
      break;
      }
    case NAT:{
      jj_consume_token(NAT);
      break;
      }
    case REAL:{
      jj_consume_token(REAL);
      break;
      }
    case CHAR:{
      jj_consume_token(CHAR);
      break;
      }
    case BOOL:{
      jj_consume_token(BOOL);
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      break;
      }
    case LOOP:{
      jj_consume_token(LOOP);
      break;
      }
    case DO:{
      jj_consume_token(DO);
      break;
      }
    case IF:{
      jj_consume_token(IF);
      break;
      }
    case OPEN_CURLY:{
      jj_consume_token(OPEN_CURLY);
      break;
      }
    case CLOSE_CURLY:{
      jj_consume_token(CLOSE_CURLY);
      break;
      }
    case OPEN_PARENT:{
      jj_consume_token(OPEN_PARENT);
      break;
      }
    case CLOSE_PARENT:{
      jj_consume_token(CLOSE_PARENT);
      break;
      }
    case OPEN_SQUARE:{
      jj_consume_token(OPEN_SQUARE);
      break;
      }
    case CLOSE_SQUARE:{
      jj_consume_token(CLOSE_SQUARE);
      break;
      }
    case EQUAL:{
      jj_consume_token(EQUAL);
      break;
      }
    case N_EQUAL:{
      jj_consume_token(N_EQUAL);
      break;
      }
    case GREATER:{
      jj_consume_token(GREATER);
      break;
      }
    case LOWER:{
      jj_consume_token(LOWER);
      break;
      }
    case LOW_EQ:{
      jj_consume_token(LOW_EQ);
      break;
      }
    case GREAT_EQ:{
      jj_consume_token(GREAT_EQ);
      break;
      }
    case PLUS:{
      jj_consume_token(PLUS);
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      break;
      }
    case TIMES:{
      jj_consume_token(TIMES);
      break;
      }
    case DIVIDE:{
      jj_consume_token(DIVIDE);
      break;
      }
    case POWER:{
      jj_consume_token(POWER);
      break;
      }
    case INT_DIVIDE:{
      jj_consume_token(INT_DIVIDE);
      break;
      }
    case MOD:{
      jj_consume_token(MOD);
      break;
      }
    case AND:{
      jj_consume_token(AND);
      break;
      }
    case OR:{
      jj_consume_token(OR);
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      break;
      }
    case DELIMITER:{
      jj_consume_token(DELIMITER);
      break;
      }
    case SEPARATOR:{
      jj_consume_token(SEPARATOR);
      break;
      }
    case HEADER_DEF:{
      jj_consume_token(HEADER_DEF);
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      break;
      }
    case INTEGER:{
      jj_consume_token(INTEGER);
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
      break;
      }
    case LITERAL:{
      jj_consume_token(LITERAL);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  /** Generated Token Manager. */
  public IpsisLiterisTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x2000,0x0,0x10000,0x20000,0x30000,0x3c00000,0x3c00000,0xb0340000,0x8000000,0x4000000,0xc000000,0x0,0x0,0xb0340000,0x0,0x0,0x0,0x0,0x0,0xc000000,0xc000000,0x0,0x3c00000,0xc000000,0x0,0x0,0x0,0xfffff000,0xfffff000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x1000000,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x800000,0x0,0xfc0,0x103000,0xec000,0x10000,0x200000,0x62200004,0x62000000,0x10,0x0,0x60000000,0xfc0,0x103000,0xec000,0x63ffffff,0x63ffffff,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x2,};
	}

  /** Constructor with InputStream. */
  public IpsisLiteris(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public IpsisLiteris(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new IpsisLiterisTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public IpsisLiteris(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new IpsisLiterisTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new IpsisLiterisTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public IpsisLiteris(IpsisLiterisTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(IpsisLiterisTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[73];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 30; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 73; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
